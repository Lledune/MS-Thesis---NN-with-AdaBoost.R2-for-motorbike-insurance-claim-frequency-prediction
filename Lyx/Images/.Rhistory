#This file's goal is to make an exploratory analysis of our dataset to get osme insights about what we are working with.
path = "c:/users/lucien/desktop/Poisson-neural-network-insurance-pricing/mcc.csv"
data = read.csv(path, sep = ",")
#Mapping K to F for clarity
library(plyr)
library(ggplot2)
library(gridExtra)
data$Gender = mapvalues(data$Gender, from = c("M", "K"), to = c("M", 'F'))
#Mapping zones
#data$Zone = mapvalues(data$Zone, from = c("1", "2", "3", "4", "5", "6", "7"), to = c("Central Largest", "Suburbs", "Lesser Towns", "Small towns", "Northern towns", "Northern countryside", "Gotland"))
cc <- scales::seq_gradient_pal("black", "red", "Lab")(seq(0,1,length.out=80))
cc2 <- scales::seq_gradient_pal("black", "red", "Lab")(seq(0,1,length.out=20))
ggGender = ggplot(data=data, aes(x=Gender, fill = Gender)) + geom_bar(stat="count") +
labs(title = "Gender repartition") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual("legend", values = c("M" = "darkblue", "F" = "darkred", "3" = "black"))
ggGender
ggOwnersAge = ggplot(data=data, aes(x=OwnersAge)) +
geom_bar(stat="count", col = "black", aes(fill = ..count..)) + labs(title = "OwnersAge repartition") +
theme(plot.title = element_text(hjust = 0.5)) + guides(fill=FALSE) + scale_fill_gradient("Count", low = "green", high = "red")
ggOwnersAge
ggVehiculeAge = ggplot(data=data, aes(x=VehiculeAge)) + geom_bar(stat="count", col = "black", aes(fill = ..count..)) +
labs(title = "VehiculeAge repartition") + theme(plot.title = element_text(hjust = 0.5)) + scale_fill_gradient("Count", low = "green", high = "red")
ggVehiculeAge
ggOwnersAge = ggplot(data=data, aes(x=OwnersAge)) +
geom_bar(stat="count", col = "black", aes(fill = ..count..)) + labs(title = "OwnersAge repartition") +
theme(plot.title = element_text(hjust = 0.5)) + scale_fill_gradient("Count", low = "green", high = "red")
ggOwnersAge
png("ownerage.png")
print(ggOwnersAge)
dev.off()
png("vehiculeage.png")
print(ggVehiculeAge)
dev.off()
#This file's goal is to make an exploratory analysis of our dataset to get osme insights about what we are working with.
path = "c:/users/lucien/desktop/Poisson-neural-network-insurance-pricing/mcc.csv"
data = read.csv(path, sep = ",")
#Mapping K to F for clarity
library(plyr)
library(ggplot2)
library(gridExtra)
data$Gender = mapvalues(data$Gender, from = c("M", "K"), to = c("M", 'F'))
#Mapping zones
#data$Zone = mapvalues(data$Zone, from = c("1", "2", "3", "4", "5", "6", "7"), to = c("Central Largest", "Suburbs", "Lesser Towns", "Small towns", "Northern towns", "Northern countryside", "Gotland"))
cc <- scales::seq_gradient_pal("black", "red", "Lab")(seq(0,1,length.out=80))
cc2 <- scales::seq_gradient_pal("black", "red", "Lab")(seq(0,1,length.out=20))
ggGender = ggplot(data=data, aes(x=Gender, fill = Gender)) + geom_bar(stat="count") +
labs(title = "Gender repartition") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual("legend", values = c("M" = "darkblue", "F" = "darkred", "3" = "black"))
ggGender
ggOwnersAge = ggplot(data=data, aes(x=OwnersAge)) +
geom_bar(stat="count", col = "black", aes(fill = ..count..)) + labs(title = "OwnersAge repartition") +
theme(plot.title = element_text(hjust = 0.5)) + scale_fill_gradient("Count", low = "green", high = "red")
ggOwnersAge
ggVehiculeAge = ggplot(data=data, aes(x=VehiculeAge)) + geom_bar(stat="count", col = "black", aes(fill = ..count..)) +
labs(title = "VehiculeAge repartition") + theme(plot.title = element_text(hjust = 0.5)) + scale_fill_gradient("Count", low = "green", high = "red")
ggVehiculeAge
ggZone = ggplot(data=data, aes(x=Zone)) + geom_bar(stat="count", col = "black", aes(fill = ..count..)) +
labs(title = "Zone repartition") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggZone
ggClass = ggplot(data=data, aes(x=Class)) + geom_bar(stat="count", col = "black", aes(fill = ..count..)) +
labs(title = "Class repartition") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggClass
ggBonus = ggplot(data=data, aes(x=BonusClass)) + geom_bar(stat="count", col = "black", aes(fill = ..count..)) +
labs(title = "BonusClass repartition") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggBonus
ggClaims = ggplot(data=data, aes(x=NumberClaims)) + geom_bar(stat="count", col = "black", aes(fill = ..count..)) +
labs(title = "Claims repartition") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggClaims
ggDuration = ggplot(data=data, aes(x=Duration)) + geom_histogram(breaks = seq(0,3,by = 0.1), col = "black", aes(fill = ..count..)) +
labs(title = "Duration repartition") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggDuration
#do not take lines where cost is 0 or graph will be impossible to read because of the difference in counts. NOTE : some outliers arn't taken into the graph for a bette visualisation
ggCost = ggplot(data=data[data$ClaimCost >0,], aes(x = ClaimCost)) + geom_histogram(breaks = seq(0,200000, by = 5000), aes(fill = ..count..)) +
labs(title = "ClaimCost repartition", subtitle = "Intervals of 5000") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggCost
#TODO : Plot for male/female claims numbers and claimcost ... Same with AGE ... Maybe two lines, M+F by age
length(table(data$OwnersAge))#74
Mnumb = matrix(ncol = 1, nrow = 74)
Fnumb = matrix(ncol = 1, nrow = 74)
for(i in 16:92){
Mnumb[i-15] = sum(data$NumberClaims[data$Gender == "M" & data$OwnersAge == i])
Fnumb[i-15] = sum(data$NumberClaims[data$Gender == "F" & data$OwnersAge == i])
}
table(data$Gender)
FTot = 9843
MTot = 54662
ratioMF = MTot/FTot
#Since there are much more men in the dataset, we are going to multiplay the number of claims of women by the ratio of men/women so it is more comparable.
#Results should only be taken into account to give an insight about data, but since they were extrapolized they may not be exact
Fnumb = Fnumb * ratioMF
df = as.data.frame(cbind(Mnumb, Fnumb))
test = ggplot(df, aes(x = 16:92)) + geom_line(aes(y = Mnumb, col = "M")) +
geom_line(aes(y = Fnumb, col = "F")) +
scale_color_manual(name = "", values = c("M" = "#00ba38", "F" = "#f8766d")) +
theme(panel.grid.minor = element_blank()) +
labs(title = "M vs F by Age for NumberClaims", y = 'NumberClaims', x = "Age")
test
#number of claims by region
ggZoneClaim = ggplot(data=data, aes(x=Zone, weights = NumberClaims)) + geom_bar(col = "black", aes(fill = ..count..)) +
labs(title = "Zone claims repartition", y = "N.Claims") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggZoneClaim
ggGenderClaim = ggplot(data=data, aes(x=Gender, weights = NumberClaims)) + geom_bar(col = "black", aes(fill = ..count..)) +
labs(title = "Gender claims repartition", y = "N.Claims") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggGenderClaim
ggClassClaim = ggplot(data=data, aes(x=Class, weights = NumberClaims)) + geom_bar(col = "black", aes(fill = ..count..)) +
labs(title = "VehicleClass claims repartition", y = "N.Claims") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggClassClaim
ggBonusClaim = ggplot(data=data, aes(x=Class, weights = BonusClass)) + geom_bar(col = "black", aes(fill = ..count..)) +
labs(title = "User bonus claims repartition", y = "N.Claims") + theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_gradient("Count", low = "green", high = "red")
ggBonusClaim
setwd("c:/users/lucien/desktop/Poisson-neural-network-insurance-pricing/R/plots")
#Printing plots
png("zoneClaim.png")
print(ggZoneClaim)
dev.off
png("BonusClaim.png")
print(ggBonusClaim)
dev.off
png("ClassClaim.png")
print(ggClassClaim)
dev.off
png("genderClaim.png")
print(ggGenderClaim)
dev.off
png("gender2.png")
print(ggGender)
dev.off()
png("ownerage.png")
print(ggOwnersAge)
dev.off()
png("vehiculeage.png")
print(ggVehiculeAge)
dev.off()
png("zone.png")
print(ggZone)
dev.off()
png("class.png")
print(ggClass)
dev.off()
png("bonus.png")
print(ggBonus)
dev.off()
png("claims.png")
print(ggClaims)
dev.off()
png("duration.png")
print(ggDuration)
dev.off()
png("claimcost2.png")
print(ggCost)
dev.off()
png("MvFclaims.png")
print(test)
dev.off()
